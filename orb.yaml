version: 2.1

description: Combined build, publish, and release Docker images to feedyard container registry

executors:
  circleci-base:
    description: The docker container to use when running docker-publish commands
    docker:
      - image: quay.io/feedyard/circleci-base-agent
    environment:
      REGISTRY: quay.io
      DOCKERFILE: Dockerfile
      BASH_ENV: local.env

commands:

  decrypt-secrets:
    description: Example method for passing simple secrets
    steps:
      - run:
          name: decrypt secrets
          command: openssl aes-256-cbc -d -in env.ci -out local.env -k $FEEDYARD_PIPELINE_KEY

  check:
    description: |
      Sanity check to make sure you can build a docker image.

        * check that $DOCKER_LOGIN and $DOCKER_PASSWORD environment variables are set
        * run docker login to ensure that you can push the built image
    parameters:
      registry:
        description: Name of registry to use. Defaults to quay.io.
        type: string
        default: $REGISTRY
    steps:
      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${DOCKER_LOGIN}" ]]; then
              echo "DOCKER_LOGIN is not set, will not be able to push image."
              exit 1
            fi

            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to push image."
              exit 1
            fi
      - run:
          name: Docker Login
          command: echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_LOGIN --password-stdin << parameters.registry >>

  build:
    description: Build and SHA1 Tag a Docker Image.
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: $DOCKERFILE
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      image:
        description: Name of image to create. Defaults to a combination of $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: $REGISTRY
    steps:
      - run:
          name: Build Docker Image
          command: docker build -f << parameters.dockerfile >> -t << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.path >>

  test:
    description: Standard docker image CIS and inspec test
    
  version-tag:
    description: Pull and version Tag a Docker Image.
    parameters:
      image:
        description: Name of image to create. Defaults to a combination of $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      pull-tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_TAG.
        type: string
        default: $CIRCLE_TAG
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: $REGISTRY
    steps:
      - run:
          name: Pull Docker Image
          command: docker pull << parameters.registry >>/<< parameters.image >>:<< parameters.pull-tag >>
      - run:
          name: Version tag Docker Image
          command: |
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.pull-tag >> << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.pull-tag >> << parameters.registry >>/<< parameters.image >>:latest

  deploy:
    description: Deploy docker image to a registry.
    parameters:
      registry:
        description: Name of registry to use. Defaults to quay.io.
        type: string
        default: $REGISTRY
      image:
        description: Name of image to create. Defaults to a combination of $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
    steps:
    - run:
        name: Push Docker Image
        command: docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

jobs:

  publish:
    description: Build and Push a Docker Image.
    executor: circleci-base
    parameters:
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile.
        type: string
        default: $DOCKERFILE
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      image:
        description: Name of image to create. Defaults to a combination of $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: $REGISTRY
      after_checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before_build:
        description: Optional steps to run before building the docker image.
        type: steps
        default: []
      after_build:
        description: Optional steps to run after building the docker image.
        type: steps
        default: []
    steps:
      - checkout
      - when:
          name: Run after_checkout lifecycle hook steps.
          condition: << parameters.after_checkout >>
          steps: << parameters.after_checkout >>
      - setup_remote_docker
      - decrypt-secrets
      - check:
          registry: << parameters.registry >>
      - when:
          name: Run before_build lifecycle hook steps.
          condition: << parameters.before_build >>
          steps: << parameters.before_build >>
      - build:
          dockerfile: << parameters.dockerfile >>
          path: << parameters.path >>
          image: << parameters.image >>
          tag: << parameters.tag >>
          registry: << parameters.registry >>
      - test:

      - when:
          name: Run after_build lifecycle hook steps.
          condition: << parameters.after_build >>
          steps: << parameters.after_build >>
      - deploy:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>

  release:
    description: Pull current SHA1 tagged container, tag with release version, and Push Docker Image.
    executor: circleci-base
    parameters:
      image:
        description: Name of image to create. Defaults to a combination of $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      pull-tag:
        description: Value for tag of image to pull. Defaults to $CIRCLE_SHA1.
        type: string
        default: $CIRCLE_SHA1
      tag:
        description: Value for tag to use. Defaults to $CIRCLE_TAG.
        type: string
        default: $CIRCLE_TAG
      registry:
        description: Name of registry to use. Defaults to quay.io.
        type: string
        default: $REGISTRY
      after_checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before_tag:
        description: Optional steps to run before version tagging the docker image.
        type: steps
        default: []
      after_tag:
        description: Optional steps to run after version tagging the docker image.
        type: steps
        default: []
    steps:
      - checkout
      - when:
          name: Run after_checkout lifecycle hook steps.
          condition: << parameters.after_checkout >>
          steps: << parameters.after_checkout >>
      - setup_remote_docker
      - decrypt-secrets
      - check:
          registry: << parameters.registry >>
      - when:
          name: Run before_tag lifecycle hook steps.
          condition: << parameters.before_tag >>
          steps: << parameters.before_tag >>
      - version-tag:
          image: << parameters.image >>
          pull-tag: << parameters.pull-tag >>
          tag: << parameters.tag >>
          registry: << parameters.registry >>
      - when:
          name: Run after_tag lifecycle hook steps.
          condition: << parameters.after_tag >>
          steps: << parameters.after_tag >>
      - deploy:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
      - deploy:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: latest

#examples:
#  standard_build_and_push:
#    description: |
#      A standard docker workflow, where you are building an image with a
#      Dockerfile in the root of your repository, naming the image to be the
#      same name as your repository, and then pushing to the default docker
#      registry (at docker.io).
#    usage:
#      version: 2.1
#
#      orbs:
#        docker-publish: circleci/docker-publish@1.0.0
#
#      workflows:
#        build_and_publish_docker_image:
#          jobs:
#          - docker-publish/publish
#
#  custom_name_and_tag:
#    description: Build and Deploy docker image with a custom name and tag.
#    usage:
#      version: 2.1
#
#      orbs:
#        docker-publish: circleci/docker-publish@1.0.0
#
#      workflows:
#        build_and_publish_docker_image:
#          jobs:
#          - docker-publish/publish:
#              image: my/image
#              tag: my_tag
#
#  custom_registry_and_dockerfile:
#    description: |
#      Build and Deploy docker image with a non standard Dockerfile and to a
#      custom registry.
#    usage:
#      version: 2.1
#
#      orbs:
#        docker-publish: circleci/docker-publish@1.0.0
#
#      workflows:
#        build_and_publish_docker_image:
#          jobs:
#          - docker-publish/publish:
#              registry: my.docker.registry
#              dockerfile: path/to/MyDockerFile
#
#  life_cycle_hooks:
#    description: |
#      Build and deploy a docker image with custom lifecycle hooks; before
#      checking out the code from the VCS repository, before building the
#      docker image, and after building the docker image.
#    usage:
#      version: 2.1
#
#      orbs:
#        docker-publish: circleci/docker-publish@1.0.0
#
#      workflows:
#        docker_with_lifecycle:
#          jobs:
#          - docker-publish/publish:
#              after_checkout:
#              - run:
#                  name: Do this after checkout.
#                  command: echo "Did this after checkout"
#              before_build:
#              - run:
#                  name: Do this before the build.
#                  command: echo "Did this before the build"
#              after_build:
#              - run:
#                  name: Do this after the build.
#                  command: echo "Did this after the build"
---
version: 2.1

description: |
  Standard jobs for building publishing custom circleci docker executor images. Assumes DOCKER_LOGIN and DOCKER_PASSWORD
  Environment variables are defined. See https://github.com/feedyard/circleci-remote-docker for an example test
  configuration. Incorporates concepts from circleci/docker-publish@0.1.2.

examples:

  standard_workflow:
    description: |
      A standard TBD circleci docker agent pipeline workflow, where git push triggers build and push.
      Dockerfile is in the root of your repository, image name is same name as your repository, and
      pushing to a default docker registry.

    usage:
      version: 2.1

      orbs:
        circle-agent: feedyard/circleci-agent-publish@1.0.0

      workflows:
        circleci-remote-docker-image-pipeline:
          jobs:
            - circle-agent/dev-release:
                filters:
                  branches:
                    only: master
                  tags:
                    ignore: /.*/
            - circle-agent/publish:
                filters:
                  branches:
                    ignore: /.*/
                  tags:
                    only: /.*/

  using_custom_values:
    description: Build and push docker image to a custom registry with a custom name and tag.
    usage:
      version: 2.1

      orbs:
        circle-agent: feedyard/circleci-agent-publish@1.0.0

      workflows:
        build_and_release_docker_image:
          jobs:
            - circle-agent/dev-release:
                registry: my.docker.registry
                image: my/image
                tag: my_tag

  life_cycle_hooks:
    description: Build, TEST, and push a docker image using custom lifecycle hooks.
    usage:
      version: 2.1

      orbs:
        circle-agent: feedyard/circleci-agent-publish@1.0.0

      workflows:
        docker_with_lifecycle:
          jobs:
            - circle-agent/dev-release:
                after_build:
                  - run:
                      name: configuration testing of the image
                      command: |
                        set -euo pipefail
                        inspec exec --no-distinct-exit profiles/cis-docker
                        CID="$(docker run -it -d --entrypoint bash << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>)"
                        inspec exec profiles/circleci-remote-docker/ -t docker://$CID
                        docker rm -f $CID

executors:

  circleci-base-agent:
    description: The docker container to use when running circleci-agent-publish jobs
    docker:
      - image: quay.io/feedyard/circleci-base-agent

commands:

  setup-registry:
    description: |
      confirm $DOCKER_LOGIN and $DOCKER_PASSWORD environment variables are set and
      run docker login to ensure that you can push the build image
    parameters:
      registry:
        description: Docker registry
        type: string
        default: docker.io
    steps:
      - run:
          name: Confirm Docker registry environment variables are configured and correct
          command: |
            if [[ -z "${DOCKER_LOGIN}" ]]; then
              echo "DOCKER_LOGIN is not set, will not be able to push image."
              exit 1
            fi

            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to push image."
              exit 1
            fi
      - run:
          name: Docker Login
          command: echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_LOGIN --password-stdin << parameters.registry >>

jobs:

  dev-release:
    description: Standard build, test, and push of circleci remote docker agent image.
    executor: circleci-base-agent
    parameters:
      dockerfile:
        description: Name of dockerfile
        type: string
        default: Dockerfile
      path:
        description: Path to the files for the “context” of the build on the Docker daemon
        type: string
        default: .
      image:
        description: Name of image to create
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      tag:
        description: Value for tag
        type: string
        default: $CIRCLE_SHA1
      registry:
        description: Docker registry to use
        type: string
        default: docker.io
      after_checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before_build:
        description: Optional steps to run before building the docker image.
        type: steps
        default: []
      after_build:
        description: Optional steps to run after building the docker image.
        type: steps
        default: []
    steps:
      - checkout
      - when:
          name: Run after_checkout lifecycle hook steps.
          condition: << parameters.after_checkout >>
          steps: << parameters.after_checkout >>
      - setup_remote_docker
      - setup-registry:
          registry: << parameters.registry >>
      - when:
          name: Run before_build lifecycle hook steps.
          condition: << parameters.before_build >>
          steps: << parameters.before_build >>
      - run:
          name: use private registry
          command: docker build -f << parameters.dockerfile >> -t << parameters.registry >>/<< parameters.image >>:<< parameters.tag >> << parameters.path >>
      - when:
          name: Run after_build lifecycle hook steps.
          condition: << parameters.after_build >>
          steps: << parameters.after_build >>
      - run:
          name: push image to registry
          condition: << parameters.registry >>
          command: docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

  publish:
    description: Standard version-tag and push of circleci remote docker agent SHA1 image.
    executor: circleci-base-agent
    parameters:
      image:
        description: Name of image to Publish
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      pull-tag:
        description: dev-release tag to pull
        type: string
        default: $CIRCLE_SHA1
      tag:
        description: Value for Publish tag
        type: string
        default: $CIRCLE_TAG
      registry:
        description: Docker registry
        type: string
        default: docker.io
      after_checkout:
        description: Optional steps to run after checking out the code.
        type: steps
        default: []
      before_tag:
        description: Optional steps to run before version tagging the docker image.
        type: steps
        default: []
      after_tag:
        description: Optional steps to run after version tagging the docker image.
        type: steps
        default: []
    steps:
      - checkout
      - when:
          name: Run after_checkout lifecycle hook steps.
          condition: << parameters.after_checkout >>
          steps: << parameters.after_checkout >>
      - setup_remote_docker
      - setup-registry:
          registry: << parameters.registry >>
      - when:
          name: Run before_tag lifecycle hook steps.
          condition: << parameters.before_tag >>
          steps: << parameters.before_tag >>
      - run:
          name: version-tag for private registry
          command: |
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.pull-tag >> << parameters.registry >>/<< parameters.image >>:latest
            docker tag << parameters.registry >>/<< parameters.image >>:<< parameters.pull-tag >> << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
      - when:
          name: Run after_tag lifecycle hook steps.
          condition: << parameters.after_tag >>
          steps: << parameters.after_tag >>
      - deploy:
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.tag >>
      - run:
          name: push image to registry
          condition: << parameters.registry >>
          command: |
            docker push << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>
            docker push << parameters.registry >>/<< parameters.image >>:latest

---
version: 2.1

description: |
  Feedyard common-pipeline-tasks is an example set of shared commands and jobs that team(s)
  would use to standardize basic team practices or conventions.
  Orb source code - https://github.com/feedyard/circleci-orbs/blob/master/src/common-pipeline-tasks/orb.yaml

examples:

  decrypt_local_file:
    description: |
      Use this command to decrypt a local file using openssl aes-256-cbc key encryption. Define default
      orb values according to team conventions to make it easy to 'do the right thing'.
    usage:
      version: 2.1
      orbs:
        common-tasks: feedyard/common-pipeline-tasks@0.1.3
      jobs:
        build:
          docker:
            - image: quay.io/feedyard/circleci-infra-agent
          steps:
            - common-tasks/decrypt-env:
                encryption-key: $ENV_VAR
                encoded-file: filename.in
                decoded-file: filename.out

  standard_aws_credentials:
    description: |
      Use
    usage:
      version: 2.1
      orbs:
        common-tasks: feedyard/common-pipeline-tasks@0.1.3
      jobs:
        build:
          docker:
            - image: quay.io/feedyard/circleci-infra-agent
          steps:
            - common-tasks/setup-aws-credentials:
                aws-access-key-id: $ENV_VAR1
                aws-secret-access-key: $ENV_VAR2
                aws-region: $ENV_VAR3

commands:

  decrypt-env:
    description: decrypt env file
    parameters:
      encryption-key:
        description: Encryption key (recommend 100 chars or more in random key gen)
        type: string
        default: $FEEDYARD_CIRCLECI_ENC
      encoded-file:
        description: Name of encrypted file
        type: string
        default: env.ci
      decoded-file:
        description: Name of decrypted output file
        type: string
        default: local.env
    steps:
      - run:
          name: decrypt local file
          command: openssl aes-256-cbc -d -in << parameters.encoded-file >> -out << parameters.decoded-file >> -k <<parameters.encryption-key >>

  setup-aws-credentials:
    description: Setup default ~/.aws style credentials
    parameters:
      aws-access-key-id:
        description: aws access key id
        type: string
        default: $AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        description: aws secret access key
        type: string
        default: $AWS_SECRET_ACCESS_KEY
      aws-region:
        description: default aws region
        type: string
        default: $AWS_REGION
      aws-role:
        description: assume aws role
        type: string
    steps:
      - when:
          condition: << parameters.aws-role >>
          steps:
            - run:
                name: get aws role token
                command: |
                  TMP="$(aws sts assume-role --output json --role-arn << parameters.aws-role >> --role-session-name $CIRCLE_PROJECT_REPONAME || { echo 'sts failure!' ; exit 1; })"
                  AWS_ACCESS_KEY_ID=$(echo $TMP | jq -r ".Credentials.AccessKeyId")
                  AWS_SECRET_ACCESS_KEY=$(echo $TMP | jq -r ".Credentials.SecretAccessKey")
                  AWS_SESSION_TOKEN=$(echo $TMP | jq -r ".Credentials.SessionToken")
            - run:
                name: setup assumed-role ~/.aws credentials
                command: |
                  echo "[default]" > ~/.aws/credentials
                  echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >>  ~/.aws/credentials
                  echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >>  ~/.aws/credentials
                  echo "aws_session_token=$AWS_SESSION_TOKEN" >>  ~/.aws/credentials
                  echo "region=<< parameters.aws-region >>" >>  ~/.aws/credentials
      - unless:
          condition: << parameters.aws-role >>
          steps:
            - run:
                name: setup standard ~/.aws credentials
                command: |
                  echo "[default]" > ~/.aws/credentials
                  echo "aws_access_key_id=<< parameters.aws-access-key-id >>" >>  ~/.aws/credentials
                  echo "aws_secret_access_key=<< parameters.aws-secret-access-key >>" >>  ~/.aws/credentials
                  echo "region=<< parameters.aws-region >>" >>  ~/.aws/credentials

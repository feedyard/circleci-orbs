---
version: 2.1

workflows:
  circleci-orbs-pipeline:
    jobs:
      - dev-release
#          filters:
#            branches:
#              only: master
#            tags:
#              ignore: /.*/
      - approve-publish:
          type: approval
          requires:
            - dev-release
      - publish:
          requires:
            - approve-publish
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /.*/

executors:

  circleci-orb-agent:
    docker:
      - image: quay.io/feedyard/circleci-orb-agent
    environment:
      TAG_MSG_ORB_IDENTIFIER: orb
      TAG_MSG_SEMVER_IDENTIFIER: level
      BASH_ENV: local.env


jobs:

  dev-release:
    executor: circleci-orb-agent
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: decrypt secrets
          command: openssl aes-256-cbc -d -in env.ci -out local.env -k $FEEDYARD_CIRCLECI_ENC
      - run:
          name: lint
          command: yamllint .
      - run:
          name: validate orbs
          command: ash scripts/validate_orbs.sh
      - run:
          name: SHA1/volatile development release
          #working_directory: project
          command: |
            for ORB in src/*; do
              orbname=$(basename $ORB)
              # dev release using SHA1 as release version
              circleci orb publish ${ORB}/orb.yaml $CIRCLE_PROJECT_USERNAME/$orbname@dev:$CIRCLE_SHA1 --token $CIRCLECI_API_TOKEN
              # dev release using 'volatile' as release version
              circleci orb publish ${ORB}/orb.yaml $CIRCLE_PROJECT_USERNAME/$orbname@dev:latest --token $CIRCLECI_API_TOKEN
            done
#            if [git show | awk -v id="$TAG_IDENTIFIER" '{for(i=1;i<=NF;i++)if($i~id)print $(i+1)}']; then
#              echo 'commit msg indicates ready to publish'
#              echo $(git show | awk -v id="$TAG_IDENTIFIER" '{for(i=1;i<=NF;i++)if($i~id)print $(i+1)}')
#              echo $(git show | awk -v id="$SEMANTIC_IDENTIFIER" '{for(i=1;i<=NF;i++)if($i~id)print $(i+1)}')
#            fi

  publish:
    executor: circleci-orb-agent
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: decrypt secrets
          command: openssl aes-256-cbc -d -in env.ci -out local.env -k $FEEDYARD_CIRCLECI_ENC
      - run:
          name: publish incremental orb version
          command: |
            for ORB in src/*; do
              orbname=$(basename $ORB)
              semver=patch
              if [git show | awk -v id="$TAG_IDENTIFIER" '{for(i=1;i<=NF;i++)if($i~id)print $(i+1)}']; then
                semver=$(git show | awk -v id="$SEMANTIC_IDENTIFIER" '{for(i=1;i<=NF;i++)if($i~id)print $(i+1)}')
                if [! semver]; then
                  echo "error: incorrect semver specified [$semver]"
                  exit 1
                fi
              fi
              # publish production version
              circleci orb publish promote $CIRCLE_PROJECT_USERNAME/$orbname@dev:$CIRCLE_SHA1 $semver --token $CIRCLECI_API_TOKEN
            done
#            orbname=$(git show $CIRCLE_TAG | awk '{for(i=1;i<=NF;i++)if($i~/$TAG_MSG_ORB_IDENTIFIER/)print $(i+1)}')
#            semver=$(git show $CIRCLE_TAG | awk '{for(i=1;i<=NF;i++)if($i~/$TAG_MSG_SEMVER_IDENTIFIER/)print $(i+1)}')
#            circleci orb publish promote $CIRCLE_PROJECT_USERNAME/$orbname@dev:$CIRCLE_SHA1 $semver --token $CIRCLECI_API_TOKEN
